version: '3.8'

services:
  # Eureka Server
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - eureka-network

  # Order Service
  order-postgres:
    image: postgres:15-alpine
    container_name: order_postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd1
      POSTGRES_DB: orderdb
    ports:
      - "5433:5432"
    volumes:
      - order_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d orderdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - eureka-network

  order:
    container_name: order-service
    build:
      context: ./Order
      dockerfile: Dockerfile
    depends_on:
      order-postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-postgres:5432/orderdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pwd1
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8080:8080"
    networks:
      - eureka-network

  # Inventory Service
  inventory-postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd2
      POSTGRES_DB: inventorydb
    ports:
      - "5434:5432"
    volumes:
      - inventory_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d inventorydb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - eureka-network

  inventory:
    container_name: inventory-service
    build:
      context: ./Inventory
      dockerfile: Dockerfile
    depends_on:
      inventory-postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventory-postgres:5432/inventorydb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pwd2
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8180:8080"
    networks:
      - eureka-network

  # Payment Service
  payment-postgres:
    image: postgres:15-alpine
    container_name: payment_postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd3
      POSTGRES_DB: paymentdb
    ports:
      - "5435:5432"
    volumes:
      - payment_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d paymentdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - eureka-network

  payment:
    container_name: payment-service
    build:
      context: ./Payment
      dockerfile: Dockerfile
    depends_on:
      payment-postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://payment-postgres:5432/paymentdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pwd3
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8280:8080"
    networks:
      - eureka-network

  # MongoDB
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: pwd3
    volumes:
      - mongo-data:/data/db
    networks:
      - eureka-network

  # Product Service
  product:
    build: .
    container_name: product-service
    ports:
      - "8080:8080"
    depends_on:
      - mongo
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://root:example@mongo:27017/product-service?authSource=admin
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    networks:
      - eureka-network

  # Eureka Client
  eureka-client:
    build:
      context: ./eureka-client
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    networks:
      - eureka-network

  # Service Discovery
  service-discovery:
    build:
      context: ./service-discovery
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    networks:
      - eureka-network

volumes:
  order_pgdata:
  inventory_pgdata:
  payment_pgdata:
  mongo-data:

networks:
  eureka-network:
    driver: bridge
services:
  # Eureka Server
  eureka-server:
    image: eureka-server
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://eureka-server:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s  # Tiempo extra para que Spring Boot inicie

  # API Gateway
  api-gateway:
    image: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "9090:9090"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-net

  # Inventory Service
  inventory-service:
    image: inventory-service
    build:
      context: ./Inventory
    ports:
      - "8080:8080"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      eureka-server:
        condition: service_healthy
      inventory-postgres:
        condition: service_healthy
    networks:
      - microservices-net

  inventory-postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: inventorydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 123
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d inventorydb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net

  # Order Service
  order-service:
    image: order-service
    build:
      context: ./Order
    ports:
      - "8081:8081"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      eureka-server:
        condition: service_healthy
      order-postgres:
        condition: service_healthy
    networks:
      - microservices-net

  order-postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 123
    ports:
      - "5433:5432"  # Diferente puerto externo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d orderdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net

  # Payment Service
  payment-service:
    image: payment-service
    build:
      context: ./Payment
    ports:
      - "8082:8082"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      eureka-server:
        condition: service_healthy
      payment-postgres:
        condition: service_healthy
    networks:
      - microservices-net

  payment-postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: paymentdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 123
    ports:
      - "5434:5432"  # Diferente puerto externo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d paymentdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net

  # Product Service
  product-service:
    image: product-service
    build:
      context: ./Product
    ports:
      - "8083:8083"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      eureka-server:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - microservices-net

  mongo:
    image: mongo:5
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: 123
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net

volumes:
  order_pgdata:
  inventory_pgdata:
  payment_pgdata:
  mongo-data:

networks:
  microservices-net:
    driver: bridge